<template>
    <div class="z-page">
      <template v-if="page.inited">
{% verbatim %}
  <template v-if="renderC.state.refresh">
      <render-layout :map="renderC.state.currentLayoutMap"
                     :id="renderC.state.rootId"
                     :handleNext="renderC.handleNext"
                     :handleDefMap="handleDefMap"
                     :page="page">
{% endverbatim %}
{{CONFIG.layoutSlots}}
        {% verbatim %}
      </render-layout>
    </template>
{% endverbatim %}

      </template>
    </div>
</template>

<script>


  export default {
        setup() {
          const { reactive } = global.Vue;
          let stepMap = reactive({

          })

          const 循环 = ZY.lodash.each;
          const 获取 = ZY.lodash.get;
          const 默认值 = ZY.lodash.defaultTo;

          class 工具 {
            static 设置函数(events = []) {
              let obj = {}
              events.forEach(event => {
                obj[event.name] = new ZY.AsyncFunction('e', event.code)
              })
              page.setEventHandler(obj)
            }

            /**
             * 初始化
             * @param eventModel
             */
            static 初始化(eventModel = {events: [], forms: []}) {
              // console.log(eventModel)
              this.设置函数(eventModel.events);
              let forms = eventModel.forms;

              循环(forms, form=> {
                let {value, name} = form
                let obj = ZY.JSON5.parse(value)
                let formDef = buildFormDep(obj, name);
                setDefMap(formDef, name)
              })
            }

            static 打开弹窗(refName = '') {
              if (refName) {
                let context = page.modalManRef.find(refName)

                // console.log('sdsdsdsdsdsds', context)
                if (context && context.toggle) {
                  context.toggle(true)
                }
              }
            }

            static 设置步骤(defMap = {}){
              // let defMap = {
              //   test: 'process-step1'
              // }
              console.log('设置步骤', defMap)
              for (let [key, value] of Object.entries(defMap)) {
                stepMap[key] = defMap[key]
              }
            }
          }
          globalThis.工具 = 工具

          class G {
            static 设置步骤(...args) {
              if (args.length === 2) {
                工具.设置步骤({
                  [args[0]]: args[1]
                })
              }
            }
          }
          globalThis.G = G


          let renderC = useRenderControl()
          {{ CONFIG.pageProperties }}
          {{ CONFIG.beforeScript }}

          let computed = {}
          let page = useControl({properties, computed}, {
            onInited
          })
          page = extendControl2Page(page)
          page = useAppPageControl(page)

          function setDefMap(obj, name = obj.name) {
            page.defMap.set(name, obj)
          }

          function handleDefMap(partName) {
            let is = stepMap[partName]
            // console.log(partName)
            if (page.defMap.has(is)) {
              return page.defMap.get(is)
            }
            return '{}'
          }

          async function onInited({storeControl}) {
            {{ CONFIG.onInited }}
          }

          page.stepMap = stepMap

          return {
            stepMap,
            handleDefMap,
            page,
            renderC
          }
        }
    }
</script>
