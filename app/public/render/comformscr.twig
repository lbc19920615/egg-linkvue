{% import "./macros/formGroup.twig" as formGroup %}

<template>
<div>
  {% verbatim %}
   <div>{{state}}</div>
   <div>{{computedState}}</div>
{% endverbatim %}
  {{ APP_CONFIG.server_origin }}

    <el-form :model="model" >
        {{ formGroup.renderSet("config.row.properties", "model", 1,3, 'el-col', 'template') }}
    </el-form>
</div>
</template>

<script type="module">
  import { formModel, comHelper } from '{{ APP_CONFIG.server_origin }}/public/expose/main.js';

  export default {
    props: {
      modelValue: null,
    },
    emits: [
      'model:update',
    ],
    mounted() {
      this.$emit('init', this);
    },
    setup(props, { emit }) {
      const { ref, inject, watch } = global.Vue;
      const globalStore = inject('globalStore');
      const tableData = ref([]);

      const config = ZY.JSON5.parse(`{{source}}`);
      console.log('config', config)

      const obj = formModel.createFormModel(config.row);

    let computedLinks = {
    }

    function formDefTravase(formDef = {}, computedLinks) {
      if (formDef.type === 'object') {
        Object.entries(formDef.properties)
                .forEach(([ key, formDefProp ]) => {
                  if (formDefProp.type !== 'array') {
                    if (formDefProp.computedProp) {
                      const linked = formDefProp.computedProp
                      if (!computedLinks[linked]) {
                        computedLinks[linked] = []
                      }
                      computedLinks[linked].push({
                        key
                      })
                    }
                  } else {
                    formDefTravase(formDefProp.items, computedLinks);
                  }
                });
      }
    }

    formDefTravase(config.row, computedLinks);
    // console.log(computedLinks)

    let ret = {
    }
    let computed = {}
    for (let key in config.computed) {
      computed[key] = new Function('model', 'options',`
        function VAL(v, defaultVal) {
          return ZY.lodash.get(model, v, defaultVal)
        }
        return () => {
          // console.log('computed ${key} build', options)
          options.beforeBuild('${key}')
          return ${config.computed[key]}
        }
      `)
    }


    let model = null
    ret = globalStore.run(config.service, 'initModel', {
      plain: obj,
      computed,
      callback: {
        onComputedChange(key, newVal) {
          // console.log('onComputedChange', key, newVal)
          let findKeys = computedLinks[key]
          if (Array.isArray(findKeys)) {
            findKeys.forEach(findKeyItem => {
              comHelper.autoVal({
                obj: model,
                key: findKeyItem.key,
                base: model,
                computedVal() {
                  return newVal
                }
              })
            })
          }
        }
      }
    })
    // console.log('ret', config, ret)

    model = ret.model

    watch(model, newVal => {
      // console.log('model.content', newVal)
      emit('model:update', newVal);
    });

    let templateFun = ''
    for (let funName in ZY.lodash) {
      templateFun = templateFun + `
        function ${funName}(...args) {
          return ZY.lodash.${funName}(...args)
        }
      `
    }

    function dxValue(v, ...args) {
      let fun = new Function('valueTemplate', '$root', `
        ${templateFun}
        function LENGTH(v) {
          if (v && v.length) {
            return v.length
          }
          return -1
        }
        function VAL(v, defaultVal) {
          return ZY.lodash.get($root.model, v, defaultVal)
        }
        return eval(valueTemplate)
      `)
      return fun(v, ret)
    }

    return {
      config,
      model,
      tableData,
      state: ret.model,
      computedState: ret.computedModel,
      defaultTo: ZY.lodash.defaultTo,
      get: ZY.lodash.get,
      dxValue
    };
  },
};
</script>
