{% import "./macros/formGroup.twig" as formGroup %}

<template>
<div>
  {% verbatim %}
   <div> {{ num }}</div>
   <div>{{state}}</div>
   <div>{{computedState}}</div>
{% endverbatim %}

    <el-form :model="model" >
        {{ formGroup.renderSet("config.row.properties", "model", 1,2, 'el-col', 'template') }}
    </el-form>
</div>
</template>

<script type="module">
import { formModel } from 'http://localhost:7002/public/expose/main.js';

export default {
  props: {
    modelValue: null,
  },
  emits: [
    'model:update',
  ],
  mounted() {
    this.$emit('init', this);
  },
  setup(props, { emit }) {
    const { ref, reactive, watch } = global.Vue;
    const tableData = ref([]);

    const config = JSON.parse(`{{source}}`);

    const obj = formModel.createFormModel(config.row);
    // console.log(obj)

    let computed = {}
    for (let key in config.computed) {
      computed[key] = new Function('model', `
        function GET(v) {
          return ZY.lodash.get(model, v)
        }
        return () => ${config.computed[key]}
      `)
    }

    const ret = global.storeApp.run('serviceA', 'initModel', {
      plain: obj,
      computed
    })
    console.log('ret', config, ret)

    const model = reactive(obj);

    function setModel(newVal) {
      console.log('formDesigner setModel', newVal);
      for (const key in newVal) {
        model[key] = newVal[key];
        // console.log(key, model[key], newVal[key])
      }
    }

    watch(model, newVal => {
      // console.log('model.content', newVal)
      emit('model:update', newVal);
    });

    let num = ref(1)

    return {
      num,
      config,
      model,
      tableData,
      setModel,
      state: ret.model,
      computedState: ret.computedModel
    };
  },
};
</script>
