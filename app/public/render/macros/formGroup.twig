
{% import "./form.twig" as forms %}
{% import "./attr.twig" as attr %}


{% macro renderSet(obj, pathKey, path, index, max, tag = 'div', array_tag = 'template') %}
    {% set prefix = 'bs-' %}
    {% set formItemKey = 'formItem' ~ index %}
    {% set formItemLabel = 'key' ~ index %}
{#    {{ formItemLabel }}#}
    {% if index < max %}
    <el-row type="flex">
        <{{ tag }} class="{{ prefix }}{{ formItemLabel }}"
        v-for="({{ formItemKey }}, {{ formItemLabel }}) in {{ obj }}"
        slot-before="{{ formItemLabel }}"
        :span="{{ formItemKey }}.ui ? {{ formItemKey }}.ui.column : undefined"
        :hidden="dxValue({{ pathKey }}, get({{ formItemKey }}, 'ui.hidden', undefined))"
{#        :debug="dxValue(get({{ formItemKey }}, 'debug', undefined))"#}
{#        :debug="get({{ formItemKey }}, 'debug', undefined)"#}
        >
            {% set defPath =   obj ~ '[' ~ formItemLabel ~ ']'   %}
            <template v-if="{{ formItemKey }}.type !== 'array' ">
{#                {% verbatim %}{{ {% endverbatim %} {{ formItemKey }} {% verbatim %} }} {% endverbatim %}#}
                <cm-field v-model="{{ path }}[{{ formItemLabel }}]"
                          :label="{{ formItemLabel }}" :prop="{{ formItemLabel }}"
                          :form-path="'{{ path }}.' + '{{ formItemLabel }}'"
                          :type="{{ formItemKey }}.type"
                          :ui="{{ formItemKey }}.ui"
                          :rules="{{ formItemKey }}.rules"
                          :context="{{ pathKey }}"
                ></cm-field>
            </template>
            <template v-if="{{ formItemKey }}.type === 'array' ">
                <slot-com :defs="slotContent"
                          :attrs="{parts}"
                          :binds="{item: {{ formItemKey }}, index: {{ formItemLabel }}}"
                          name="form_array_before"></slot-com>
                <slot name="{{ formItemLabel }}__array__before"
                      v-bind="{item: {{ formItemKey }}, index: {{ formItemLabel }}}"></slot>
                {% set subItemKey = 'subItem' ~ index %}
                {% set subItemLabel = 'subIndex' ~ index %}
{#                {% verbatim %}{{ {% endverbatim %} {{ formItemLabel }} {% verbatim %} }} {% endverbatim %}#}
                <{{ array_tag}}
                    class="{{ prefix }}{{ formItemLabel }}__{{ subItemLabel }} {{ prefix }}{{ formItemLabel }}__{{ subItemLabel }}__array"
                    v-for="({{ subItemKey }}, {{ subItemLabel }}) in {{ path }}[{{ formItemLabel }}]"
                    :span="{{ subItemKey }}.ui ? {{ subItemKey }}.ui.column : undefined"
                >
                    {% set scopePath = path ~ '[' ~ formItemLabel ~ '][' ~ subItemLabel ~ ']'  %}
                    {% set objPath = defPath ~ '.items.properties' %}
{#                {{ objPath }}#}
{#                                     {% verbatim %}{{ {% endverbatim %} {{ objPath }} {% verbatim %} }} {% endverbatim %}#}
                    {{ _self.renderSet(objPath, pathKey, scopePath, index + 1, max, tag, array_tag) }}
                </{{ array_tag }}>
                <slot name="{{ formItemLabel }}__array__after"></slot>
            </template>
        </{{ tag }}>
        <slot-com :defs="slotContent"
                  :attrs="{parts}" name="form"></slot-com>
    </el-row>
    {% else %}
{#        {{ obj }} {{ path }}#}

{#        {% verbatim %} {{ {% endverbatim %} {{ obj }} {% verbatim %} }} {% endverbatim %}#}
    <el-row type="flex">
        <{{ tag }}
             v-for="(subFormItem, subKey) in {{ obj }}"
            :span="subFormItem.ui ? subFormItem.ui.column : undefined"
        >
{#            {% verbatim %}{{ subFormItem.type }}{% endverbatim %}#}

{#            {% verbatim %} {{ {% endverbatim %} {{ path[] }} {% verbatim %} }} {% endverbatim %}#}
            <cm-field v-model="{{ path }}[subKey]"
                      :label="subKey" :prop="subKey"
                      :form-path="'{{ path }}.' + subKey"
                      :type="subFormItem.type"
                      :ui="subFormItem.ui"
                      :rules="subFormItem.rules"
                      :context="{{ pathKey }}"
            ></cm-field>
        </{{ tag }}>
    </el-row>
    {% endif %}
{% endmacro %}

{% macro formItem(modelPath) %}
    <template v-if="ui && ui.widget">
        {{forms.custom(modelPath)}}
    </template>
    <template v-else>
{#        {% verbatim %}#}
{#        {{ui}}#}
{#        {% endverbatim %}#}
        <template v-if="type === 'string'">
            {{forms.input(modelPath)}}
        </template>
        <template v-if="type === 'number'">
            {{forms.inputNumber(modelPath)}}
        </template>
        <template v-if="type === 'integer'">
            {{forms.inputNumber(modelPath)}}
        </template>
        <template v-if="type === 'radio'">
            {{forms.radio(modelPath)}}
        </template>
        <template v-if="type === 'radioBoolean'">
            {{forms.radioBoolean(modelPath)}}
        </template>
        <template v-if="type === 'checkbox'">
            {{forms.checkbox(modelPath)}}
        </template>
        <template v-if="type === 'select'">
            {{forms.select(modelPath)}}
        </template>
        <template v-if="type === 'time'">
            {{forms.time(modelPath)}}
        </template>
    </template>
{% endmacro %}

{% macro fieldset(formDef, path) %}
    {% if formDef.type == 'object' %}
        {% for key , formItem in formDef.properties %}
                {% set scopeModelKey = path ~  key %}
                {% if formItem.type == 'string' %}
<el-form-item prop="{{key}}" model-path="{{ scopeModelKey }}" label="{{ key }}">
{{forms.input(scopeModelKey)}}
</el-form-item>
                {% endif %}
                {% if formItem.type == 'number' %}
<el-form-item prop="{{key}}" model-path="{{ scopeModelKey }}"  label="{{ key }}">
{{forms.inputNumber(scopeModelKey)}}
</el-form-item>
                {% endif %}
                {% if formItem.type == 'integer' %}
<el-form-item prop="{{key}}" model-path="{{ scopeModelKey }}"  label="{{ key }}">
                    {{forms.inputNumber(scopeModelKey)}}
</el-form-item>
                {% endif %}
                {% if formItem.type == 'boolean' %}
<el-form-item prop="{{key}}" model-path="{{ scopeModelKey }}"  label="{{ key }}">
                    {{forms.radioBoolean(scopeModelKey)}}
</el-form-item>
                {% endif %}
        {% endfor %}
    {% endif %}
{% endmacro %}


{% macro tag(def, tagName = '') %}
    {% for item in def %}
        {% if item.tag %}
            {% set tagName = item.tag %}
            <{{ tagName }}  {{ attr.parseKeyValue(item.attrs) }}>
            {{ _self.tag(item.children, tagName) }}
        {% else %}
            {{ item }}
            </{{ tagName }}>
        {% endif %}
    {% endfor %}
{% endmacro %}
